# Generated by Django 5.2.3 on 2025-06-19 11:30

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("library", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Seat",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("seat_number", models.CharField(max_length=20)),
                ("seat_code", models.CharField(blank=True, max_length=30, unique=True)),
                (
                    "seat_type",
                    models.CharField(
                        choices=[
                            ("INDIVIDUAL", "Individual Study"),
                            ("GROUP", "Group Study"),
                            ("COMPUTER", "Computer Workstation"),
                            ("SILENT", "Silent Study"),
                            ("DISCUSSION", "Discussion Area"),
                            ("PREMIUM", "Premium Seat"),
                            ("ACCESSIBLE", "Accessible Seat"),
                        ],
                        default="INDIVIDUAL",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("OCCUPIED", "Occupied"),
                            ("RESERVED", "Reserved"),
                            ("MAINTENANCE", "Under Maintenance"),
                            ("OUT_OF_ORDER", "Out of Order"),
                        ],
                        default="AVAILABLE",
                        max_length=15,
                    ),
                ),
                ("has_power_outlet", models.BooleanField(default=True)),
                ("has_ethernet", models.BooleanField(default=False)),
                ("has_monitor", models.BooleanField(default=False)),
                ("has_whiteboard", models.BooleanField(default=False)),
                ("is_near_window", models.BooleanField(default=False)),
                ("is_accessible", models.BooleanField(default=False)),
                (
                    "x_coordinate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "y_coordinate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("rotation", models.IntegerField(default=0)),
                ("is_bookable", models.BooleanField(default=True)),
                ("requires_approval", models.BooleanField(default=False)),
                ("is_premium", models.BooleanField(default=False)),
                ("max_booking_duration_hours", models.PositiveIntegerField(default=8)),
                ("total_bookings", models.PositiveIntegerField(default=0)),
                (
                    "total_usage_hours",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("last_cleaned", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField(blank=True)),
                ("features", models.JSONField(blank=True, default=list)),
                ("maintenance_notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "floor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seats",
                        to="library.libraryfloor",
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seats",
                        to="library.library",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seats",
                        to="library.librarysection",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "seats_seat",
                "ordering": ["library", "floor", "section", "seat_number"],
            },
        ),
        migrations.CreateModel(
            name="SeatBooking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "booking_code",
                    models.CharField(blank=True, max_length=30, unique=True),
                ),
                (
                    "booking_type",
                    models.CharField(
                        choices=[
                            ("REGULAR", "Regular Booking"),
                            ("RECURRING", "Recurring Booking"),
                            ("GROUP", "Group Booking"),
                            ("PRIORITY", "Priority Booking"),
                        ],
                        default="REGULAR",
                        max_length=15,
                    ),
                ),
                ("booking_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("CONFIRMED", "Confirmed"),
                            ("CHECKED_IN", "Checked In"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("NO_SHOW", "No Show"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="CONFIRMED",
                        max_length=15,
                    ),
                ),
                ("actual_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_end_time", models.DateTimeField(blank=True, null=True)),
                ("checked_in_at", models.DateTimeField(blank=True, null=True)),
                ("checked_out_at", models.DateTimeField(blank=True, null=True)),
                ("qr_code_data", models.TextField(blank=True)),
                ("qr_code_expires_at", models.DateTimeField(blank=True, null=True)),
                ("access_token", models.CharField(blank=True, max_length=100)),
                ("auto_cancel_at", models.DateTimeField(blank=True, null=True)),
                ("reminder_sent", models.BooleanField(default=False)),
                ("late_cancellation", models.BooleanField(default=False)),
                ("group_booking_id", models.UUIDField(blank=True, null=True)),
                ("group_size", models.PositiveIntegerField(default=1)),
                ("recurrence_pattern", models.JSONField(blank=True, default=dict)),
                ("purpose", models.CharField(blank=True, max_length=200)),
                ("special_requirements", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("penalty_points", models.PositiveIntegerField(default=0)),
                ("loyalty_points_earned", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group_leader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="led_group_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recurring_instances",
                        to="seats.seatbooking",
                    ),
                ),
                (
                    "seat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="seats.seat",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seat_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "seats_booking",
                "ordering": ["-booking_date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="SeatBookingWaitlist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("booking_date", models.DateField()),
                ("preferred_start_time", models.TimeField()),
                ("preferred_end_time", models.TimeField()),
                ("flexible_timing", models.BooleanField(default=False)),
                ("acceptable_duration_hours", models.PositiveIntegerField(default=2)),
                ("is_active", models.BooleanField(default=True)),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField()),
                ("priority_score", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "seat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waitlist",
                        to="seats.seat",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seat_waitlist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "seats_booking_waitlist",
                "ordering": ["-priority_score", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="SeatMaintenanceLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("CLEANING", "Cleaning"),
                            ("REPAIR", "Repair"),
                            ("INSPECTION", "Inspection"),
                            ("UPGRADE", "Upgrade"),
                            ("REPLACEMENT", "Replacement"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=15,
                    ),
                ),
                ("scheduled_date", models.DateTimeField()),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField()),
                ("issues_found", models.TextField(blank=True)),
                ("actions_taken", models.TextField(blank=True)),
                ("parts_used", models.JSONField(blank=True, default=list)),
                (
                    "cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("requires_follow_up", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("follow_up_notes", models.TextField(blank=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_maintenance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="performed_maintenance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "seat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_logs",
                        to="seats.seat",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "seats_maintenance_log",
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="SeatReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "comfort_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "cleanliness_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "noise_level_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "facilities_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("review_text", models.TextField()),
                ("reported_issues", models.JSONField(blank=True, default=list)),
                ("is_approved", models.BooleanField(default=False)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_seat_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="seats.seatbooking",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "seat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="seats.seat",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seat_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "seats_review",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SeatUsageStatistics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                ("total_bookings", models.PositiveIntegerField(default=0)),
                ("successful_checkins", models.PositiveIntegerField(default=0)),
                ("no_shows", models.PositiveIntegerField(default=0)),
                ("cancellations", models.PositiveIntegerField(default=0)),
                (
                    "total_booked_hours",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "total_used_hours",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "average_session_duration",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=6),
                ),
                (
                    "utilization_rate",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("peak_usage_hour", models.TimeField(blank=True, null=True)),
                ("unique_users", models.PositiveIntegerField(default=0)),
                ("repeat_users", models.PositiveIntegerField(default=0)),
                (
                    "seat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_statistics",
                        to="seats.seat",
                    ),
                ),
            ],
            options={
                "db_table": "seats_usage_statistics",
                "ordering": ["seat", "-date"],
            },
        ),
        migrations.AddIndex(
            model_name="seat",
            index=models.Index(
                fields=["library", "status"], name="seats_seat_library_5944f2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seat",
            index=models.Index(
                fields=["seat_type", "status"], name="seats_seat_seat_ty_944f8e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seat",
            index=models.Index(
                fields=["is_bookable", "status"], name="seats_seat_is_book_602ebf_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="seat",
            unique_together={("library", "seat_number")},
        ),
        migrations.AddIndex(
            model_name="seatbooking",
            index=models.Index(
                fields=["user", "booking_date"], name="seats_booki_user_id_6ccb7a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seatbooking",
            index=models.Index(
                fields=["seat", "booking_date"], name="seats_booki_seat_id_6bcfab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seatbooking",
            index=models.Index(
                fields=["status", "booking_date"], name="seats_booki_status_55b70d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seatbooking",
            index=models.Index(
                fields=["booking_date", "start_time"],
                name="seats_booki_booking_28bd92_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seatbookingwaitlist",
            index=models.Index(
                fields=["seat", "booking_date", "is_active"],
                name="seats_booki_seat_id_400d95_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seatbookingwaitlist",
            index=models.Index(
                fields=["user", "is_active"], name="seats_booki_user_id_2dc7da_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="seatreview",
            unique_together={("user", "seat", "booking")},
        ),
        migrations.AlterUniqueTogether(
            name="seatusagestatistics",
            unique_together={("seat", "date")},
        ),
    ]
