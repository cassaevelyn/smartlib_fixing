# Generated by Django 5.2.3 on 2025-06-19 11:30

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Library",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                ("code", models.CharField(blank=True, max_length=20, unique=True)),
                (
                    "library_type",
                    models.CharField(
                        choices=[
                            ("MAIN", "Main Library"),
                            ("BRANCH", "Branch Library"),
                            ("STUDY_CENTER", "Study Center"),
                            ("DIGITAL_HUB", "Digital Hub"),
                        ],
                        default="BRANCH",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("MAINTENANCE", "Under Maintenance"),
                            ("CLOSED", "Temporarily Closed"),
                            ("RENOVATION", "Under Renovation"),
                        ],
                        default="ACTIVE",
                        max_length=15,
                    ),
                ),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("website", models.URLField(blank=True)),
                ("opening_time", models.TimeField()),
                ("closing_time", models.TimeField()),
                ("is_24_hours", models.BooleanField(default=False)),
                ("total_capacity", models.PositiveIntegerField(default=0)),
                ("total_seats", models.PositiveIntegerField(default=0)),
                ("total_study_rooms", models.PositiveIntegerField(default=0)),
                ("has_wifi", models.BooleanField(default=True)),
                ("has_printing", models.BooleanField(default=True)),
                ("has_scanning", models.BooleanField(default=True)),
                ("has_cafeteria", models.BooleanField(default=False)),
                ("has_parking", models.BooleanField(default=False)),
                (
                    "main_image",
                    models.ImageField(blank=True, upload_to="libraries/images/"),
                ),
                ("gallery_images", models.JSONField(blank=True, default=list)),
                (
                    "floor_plan",
                    models.FileField(blank=True, upload_to="libraries/floor_plans/"),
                ),
                ("allow_booking", models.BooleanField(default=True)),
                ("booking_advance_days", models.PositiveIntegerField(default=7)),
                ("max_booking_duration_hours", models.PositiveIntegerField(default=8)),
                ("auto_cancel_minutes", models.PositiveIntegerField(default=30)),
                ("total_visits", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("total_reviews", models.PositiveIntegerField(default=0)),
                ("description", models.TextField(blank=True)),
                ("amenities", models.JSONField(blank=True, default=list)),
                ("rules", models.JSONField(blank=True, default=list)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_library",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LibraryAmenity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "amenity_type",
                    models.CharField(
                        choices=[
                            ("FACILITY", "Facility"),
                            ("SERVICE", "Service"),
                            ("EQUIPMENT", "Equipment"),
                            ("COMFORT", "Comfort"),
                        ],
                        max_length=15,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("is_available", models.BooleanField(default=True)),
                ("is_premium", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_amenities",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_amenity",
            },
        ),
        migrations.CreateModel(
            name="LibraryConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("max_advance_booking_days", models.PositiveIntegerField(default=7)),
                ("max_daily_bookings_per_user", models.PositiveIntegerField(default=1)),
                ("max_booking_duration_hours", models.PositiveIntegerField(default=8)),
                (
                    "min_booking_duration_minutes",
                    models.PositiveIntegerField(default=30),
                ),
                (
                    "auto_cancel_no_show_minutes",
                    models.PositiveIntegerField(default=30),
                ),
                ("early_checkin_minutes", models.PositiveIntegerField(default=15)),
                (
                    "late_checkout_grace_minutes",
                    models.PositiveIntegerField(default=15),
                ),
                ("qr_code_expiry_minutes", models.PositiveIntegerField(default=15)),
                ("no_show_penalty_points", models.PositiveIntegerField(default=10)),
                (
                    "late_cancellation_penalty_points",
                    models.PositiveIntegerField(default=5),
                ),
                ("overstay_penalty_per_hour", models.PositiveIntegerField(default=5)),
                ("booking_completion_points", models.PositiveIntegerField(default=10)),
                ("review_submission_points", models.PositiveIntegerField(default=5)),
                ("referral_points", models.PositiveIntegerField(default=25)),
                ("reminder_hours_before", models.JSONField(blank=True, default=list)),
                ("send_booking_confirmations", models.BooleanField(default=True)),
                ("send_checkin_reminders", models.BooleanField(default=True)),
                ("send_checkout_reminders", models.BooleanField(default=True)),
                ("enable_seat_selection", models.BooleanField(default=True)),
                ("enable_recurring_bookings", models.BooleanField(default=False)),
                ("enable_group_bookings", models.BooleanField(default=False)),
                ("enable_waitlist", models.BooleanField(default=True)),
                ("enable_reviews", models.BooleanField(default=True)),
                ("integration_settings", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configuration",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_configuration",
            },
        ),
        migrations.CreateModel(
            name="LibraryFloor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("floor_number", models.IntegerField()),
                ("floor_name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("total_seats", models.PositiveIntegerField(default=0)),
                ("study_rooms", models.PositiveIntegerField(default=0)),
                ("has_silent_zone", models.BooleanField(default=False)),
                ("has_group_study", models.BooleanField(default=False)),
                ("has_computer_lab", models.BooleanField(default=False)),
                ("has_printer", models.BooleanField(default=False)),
                ("has_restroom", models.BooleanField(default=False)),
                (
                    "floor_plan_image",
                    models.ImageField(blank=True, upload_to="libraries/floor_plans/"),
                ),
                ("layout_data", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="floors",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_floor",
                "ordering": ["library", "floor_number"],
            },
        ),
        migrations.CreateModel(
            name="LibraryHoliday",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "holiday_type",
                    models.CharField(
                        choices=[
                            ("NATIONAL", "National Holiday"),
                            ("RELIGIOUS", "Religious Holiday"),
                            ("MAINTENANCE", "Maintenance"),
                            ("SPECIAL", "Special Event"),
                            ("EMERGENCY", "Emergency Closure"),
                        ],
                        max_length=15,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("description", models.TextField(blank=True)),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="holidays",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_holiday",
                "ordering": ["library", "start_date"],
            },
        ),
        migrations.CreateModel(
            name="LibraryNotification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("ANNOUNCEMENT", "General Announcement"),
                            ("MAINTENANCE", "Maintenance Notice"),
                            ("EVENT", "Event Notification"),
                            ("CLOSURE", "Closure Notice"),
                            ("POLICY", "Policy Update"),
                            ("EMERGENCY", "Emergency Alert"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                ("target_all_users", models.BooleanField(default=True)),
                ("target_user_roles", models.JSONField(blank=True, default=list)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("show_on_dashboard", models.BooleanField(default=True)),
                ("show_on_booking", models.BooleanField(default=False)),
                ("requires_acknowledgment", models.BooleanField(default=False)),
                ("views_count", models.PositiveIntegerField(default=0)),
                ("acknowledgments_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_notification",
                "ordering": ["-priority", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LibraryOperatingHours",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                ("opening_time", models.TimeField()),
                ("closing_time", models.TimeField()),
                ("is_closed", models.BooleanField(default=False)),
                ("is_24_hours", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operating_hours",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_operating_hours",
                "ordering": ["library", "day_of_week"],
            },
        ),
        migrations.CreateModel(
            name="LibraryReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("review_text", models.TextField()),
                (
                    "cleanliness_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "noise_level_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "facilities_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "staff_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("is_approved", models.BooleanField(default=False)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("helpful_count", models.PositiveIntegerField(default=0)),
                ("reported_count", models.PositiveIntegerField(default=0)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_library_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_review",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LibrarySection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "section_type",
                    models.CharField(
                        choices=[
                            ("SILENT", "Silent Study"),
                            ("GROUP", "Group Study"),
                            ("COMPUTER", "Computer Lab"),
                            ("READING", "Reading Area"),
                            ("DISCUSSION", "Discussion Area"),
                            ("PRIVATE", "Private Study Rooms"),
                            ("GENERAL", "General Seating"),
                        ],
                        max_length=15,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("total_seats", models.PositiveIntegerField(default=0)),
                ("max_occupancy", models.PositiveIntegerField(default=0)),
                ("has_power_outlets", models.BooleanField(default=True)),
                ("has_ethernet", models.BooleanField(default=False)),
                ("has_whiteboard", models.BooleanField(default=False)),
                ("has_projector", models.BooleanField(default=False)),
                (
                    "noise_level",
                    models.CharField(
                        choices=[
                            ("SILENT", "Silent"),
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                        ],
                        default="LOW",
                        max_length=10,
                    ),
                ),
                ("requires_booking", models.BooleanField(default=True)),
                ("advance_booking_hours", models.PositiveIntegerField(default=24)),
                ("max_booking_duration", models.PositiveIntegerField(default=4)),
                ("layout_coordinates", models.JSONField(blank=True, default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "floor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sections",
                        to="library.libraryfloor",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "library_section",
                "ordering": ["floor", "name"],
            },
        ),
        migrations.CreateModel(
            name="LibraryStatistics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                ("total_visitors", models.PositiveIntegerField(default=0)),
                ("unique_visitors", models.PositiveIntegerField(default=0)),
                ("total_bookings", models.PositiveIntegerField(default=0)),
                ("successful_checkins", models.PositiveIntegerField(default=0)),
                ("no_shows", models.PositiveIntegerField(default=0)),
                ("cancellations", models.PositiveIntegerField(default=0)),
                ("peak_occupancy", models.PositiveIntegerField(default=0)),
                (
                    "average_occupancy",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("peak_hour", models.TimeField(blank=True, null=True)),
                (
                    "average_session_duration",
                    models.DurationField(blank=True, null=True),
                ),
                (
                    "total_study_hours",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "subscription_revenue",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "penalty_revenue",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="library.library",
                    ),
                ),
            ],
            options={
                "db_table": "library_statistics",
                "ordering": ["library", "-date"],
            },
        ),
        migrations.AddIndex(
            model_name="library",
            index=models.Index(
                fields=["status", "library_type"], name="library_lib_status_9b300d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="library",
            index=models.Index(fields=["city"], name="library_lib_city_880049_idx"),
        ),
        migrations.AddIndex(
            model_name="library",
            index=models.Index(
                fields=["is_deleted", "status"], name="library_lib_is_dele_d4d7a6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="libraryamenity",
            unique_together={("library", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="libraryfloor",
            unique_together={("library", "floor_number")},
        ),
        migrations.AddIndex(
            model_name="librarynotification",
            index=models.Index(
                fields=["library", "is_active", "start_date"],
                name="library_not_library_dbd3a8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="librarynotification",
            index=models.Index(
                fields=["notification_type", "priority"],
                name="library_not_notific_edded0_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="libraryoperatinghours",
            unique_together={("library", "day_of_week")},
        ),
        migrations.AlterUniqueTogether(
            name="libraryreview",
            unique_together={("library", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="librarystatistics",
            unique_together={("library", "date")},
        ),
    ]
