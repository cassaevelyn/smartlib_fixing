# Generated by Django 5.2.3 on 2025-06-19 11:30

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("library", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("middle_name", models.CharField(blank=True, max_length=100)),
                ("biography", models.TextField(blank=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("death_date", models.DateField(blank=True, null=True)),
                ("nationality", models.CharField(blank=True, max_length=100)),
                ("website", models.URLField(blank=True)),
                ("photo", models.ImageField(blank=True, upload_to="authors/photos/")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_author",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="BookCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(blank=True, max_length=20, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(default="#007bff", max_length=7)),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="books.bookcategory",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Book Categories",
                "db_table": "books_category",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(max_length=500)),
                ("subtitle", models.CharField(blank=True, max_length=500)),
                ("isbn", models.CharField(blank=True, max_length=20, unique=True)),
                ("isbn13", models.CharField(blank=True, max_length=20, unique=True)),
                ("book_code", models.CharField(blank=True, max_length=30, unique=True)),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("edition", models.CharField(blank=True, max_length=50)),
                ("pages", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("EN", "English"),
                            ("UR", "Urdu"),
                            ("AR", "Arabic"),
                            ("FR", "French"),
                            ("ES", "Spanish"),
                            ("DE", "German"),
                            ("ZH", "Chinese"),
                            ("JA", "Japanese"),
                            ("RU", "Russian"),
                            ("PT", "Portuguese"),
                        ],
                        default="EN",
                        max_length=5,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("table_of_contents", models.TextField(blank=True)),
                ("summary", models.TextField(blank=True)),
                ("keywords", models.JSONField(blank=True, default=list)),
                (
                    "book_type",
                    models.CharField(
                        choices=[
                            ("PHYSICAL", "Physical Book"),
                            ("DIGITAL", "Digital Book"),
                            ("BOTH", "Physical & Digital"),
                        ],
                        default="PHYSICAL",
                        max_length=10,
                    ),
                ),
                ("physical_copies", models.PositiveIntegerField(default=0)),
                ("available_copies", models.PositiveIntegerField(default=0)),
                (
                    "digital_file",
                    models.FileField(blank=True, upload_to="books/digital/"),
                ),
                (
                    "digital_file_size",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "digital_access_password",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "max_concurrent_digital_access",
                    models.PositiveIntegerField(default=1),
                ),
                (
                    "digital_access_duration_hours",
                    models.PositiveIntegerField(default=24),
                ),
                ("shelf_location", models.CharField(blank=True, max_length=100)),
                ("call_number", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RESERVED", "Reserved"),
                            ("CHECKED_OUT", "Checked Out"),
                            ("MAINTENANCE", "Under Maintenance"),
                            ("LOST", "Lost"),
                            ("DAMAGED", "Damaged"),
                            ("RETIRED", "Retired"),
                        ],
                        default="AVAILABLE",
                        max_length=15,
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("is_new_arrival", models.BooleanField(default=False)),
                ("is_popular", models.BooleanField(default=False)),
                ("requires_approval", models.BooleanField(default=False)),
                (
                    "cover_image",
                    models.ImageField(blank=True, upload_to="books/covers/"),
                ),
                (
                    "thumbnail",
                    models.ImageField(blank=True, upload_to="books/thumbnails/"),
                ),
                ("total_reservations", models.PositiveIntegerField(default=0)),
                ("total_checkouts", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("total_reviews", models.PositiveIntegerField(default=0)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("is_premium", models.BooleanField(default=False)),
                (
                    "rental_price_per_day",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("additional_metadata", models.JSONField(blank=True, default=dict)),
                (
                    "authors",
                    models.ManyToManyField(related_name="books", to="books.author"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books",
                        to="library.library",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="books",
                        to="books.bookcategory",
                    ),
                ),
            ],
            options={
                "db_table": "books_book",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="BookReadingList",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reading_lists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_reading_list",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BookReadingListItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("order", models.PositiveIntegerField(default=0)),
                ("notes", models.TextField(blank=True)),
                ("is_read", models.BooleanField(default=False)),
                ("read_date", models.DateField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="books.book"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reading_list",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="books.bookreadinglist",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_reading_list_item",
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.AddField(
            model_name="bookreadinglist",
            name="books",
            field=models.ManyToManyField(
                related_name="reading_lists",
                through="books.BookReadingListItem",
                to="books.book",
            ),
        ),
        migrations.CreateModel(
            name="BookRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("SIMILAR", "Similar Books"),
                            ("AUTHOR", "Same Author"),
                            ("CATEGORY", "Same Category"),
                            ("COLLABORATIVE", "Users Also Liked"),
                            ("TRENDING", "Trending Now"),
                            ("PERSONALIZED", "Personalized"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=4, default=0.0, max_digits=5),
                ),
                ("reason", models.TextField(blank=True)),
                ("viewed", models.BooleanField(default=False)),
                ("clicked", models.BooleanField(default=False)),
                ("reserved", models.BooleanField(default=False)),
                ("dismissed", models.BooleanField(default=False)),
                ("algorithm_version", models.CharField(default="1.0", max_length=20)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="books.book",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_recommendation",
                "ordering": ["-confidence_score", "-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="BookReservation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "reservation_code",
                    models.CharField(blank=True, max_length=30, unique=True),
                ),
                (
                    "reservation_type",
                    models.CharField(
                        choices=[
                            ("PHYSICAL", "Physical Book"),
                            ("DIGITAL", "Digital Access"),
                        ],
                        default="PHYSICAL",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("CONFIRMED", "Confirmed"),
                            ("READY_FOR_PICKUP", "Ready for Pickup"),
                            ("CHECKED_OUT", "Checked Out"),
                            ("RETURNED", "Returned"),
                            ("CANCELLED", "Cancelled"),
                            ("EXPIRED", "Expired"),
                            ("OVERDUE", "Overdue"),
                        ],
                        default="CONFIRMED",
                        max_length=20,
                    ),
                ),
                ("reservation_date", models.DateTimeField(auto_now_add=True)),
                ("pickup_deadline", models.DateTimeField(blank=True, null=True)),
                ("pickup_date", models.DateTimeField(blank=True, null=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                ("return_date", models.DateTimeField(blank=True, null=True)),
                (
                    "digital_access_granted_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "digital_access_expires_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "digital_access_password",
                    models.CharField(blank=True, max_length=100),
                ),
                ("access_count", models.PositiveIntegerField(default=0)),
                ("max_access_count", models.PositiveIntegerField(default=50)),
                ("reminder_sent", models.BooleanField(default=False)),
                ("overdue_notices_sent", models.PositiveIntegerField(default=0)),
                (
                    "late_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "damage_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                ("penalty_points", models.PositiveIntegerField(default=0)),
                ("purpose", models.CharField(blank=True, max_length=200)),
                ("notes", models.TextField(blank=True)),
                ("condition_at_pickup", models.TextField(blank=True)),
                ("condition_at_return", models.TextField(blank=True)),
                ("renewal_count", models.PositiveIntegerField(default=0)),
                ("max_renewals", models.PositiveIntegerField(default=2)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="books.book",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "issued_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="issued_book_reservations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pickup_library",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_pickups",
                        to="library.library",
                    ),
                ),
                (
                    "return_library",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_returns",
                        to="library.library",
                    ),
                ),
                (
                    "returned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="received_book_returns",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_reservations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_reservation",
                "ordering": ["-reservation_date"],
            },
        ),
        migrations.CreateModel(
            name="BookDigitalAccess",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("access_token", models.CharField(max_length=100, unique=True)),
                ("session_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("pages_viewed", models.JSONField(blank=True, default=list)),
                ("total_time_spent", models.DurationField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="digital_access",
                        to="books.book",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="digital_book_access",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reservation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="digital_access_sessions",
                        to="books.bookreservation",
                    ),
                ),
            ],
            options={
                "db_table": "books_digital_access",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="BookReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "content_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "readability_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "usefulness_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("review_text", models.TextField()),
                ("pros", models.TextField(blank=True)),
                ("cons", models.TextField(blank=True)),
                ("would_recommend", models.BooleanField(default=True)),
                ("target_audience", models.CharField(blank=True, max_length=200)),
                ("is_approved", models.BooleanField(default=False)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("helpful_count", models.PositiveIntegerField(default=0)),
                ("not_helpful_count", models.PositiveIntegerField(default=0)),
                ("reported_count", models.PositiveIntegerField(default=0)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_book_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="books.book",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reservation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="books.bookreservation",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_review",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BookStatistics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                ("views", models.PositiveIntegerField(default=0)),
                ("reservations", models.PositiveIntegerField(default=0)),
                ("checkouts", models.PositiveIntegerField(default=0)),
                ("returns", models.PositiveIntegerField(default=0)),
                ("digital_access_sessions", models.PositiveIntegerField(default=0)),
                ("unique_users", models.PositiveIntegerField(default=0)),
                (
                    "average_session_duration",
                    models.DurationField(blank=True, null=True),
                ),
                (
                    "pages_per_session",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=6),
                ),
                ("new_reviews", models.PositiveIntegerField(default=0)),
                (
                    "average_daily_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="books.book",
                    ),
                ),
            ],
            options={
                "db_table": "books_statistics",
                "ordering": ["book", "-date"],
            },
        ),
        migrations.CreateModel(
            name="BookWishlist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("priority", models.PositiveIntegerField(default=1)),
                ("notes", models.TextField(blank=True)),
                ("notify_when_available", models.BooleanField(default=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wishlisted_by",
                        to="books.book",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_wishlist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_wishlist",
                "ordering": ["priority", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("logo", models.ImageField(blank=True, upload_to="publishers/logos/")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_publisher",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="book",
            name="publisher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="books",
                to="books.publisher",
            ),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(
                fields=["last_name", "first_name"],
                name="books_autho_last_na_7ca250_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookreadinglistitem",
            unique_together={("reading_list", "book")},
        ),
        migrations.AlterUniqueTogether(
            name="bookreadinglist",
            unique_together={("user", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="bookrecommendation",
            unique_together={("user", "book", "recommendation_type")},
        ),
        migrations.AddIndex(
            model_name="bookreservation",
            index=models.Index(
                fields=["user", "status"], name="books_reser_user_id_3a295a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookreservation",
            index=models.Index(
                fields=["book", "status"], name="books_reser_book_id_2bdc5a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookreservation",
            index=models.Index(
                fields=["status", "due_date"], name="books_reser_status_3c4aca_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookreservation",
            index=models.Index(
                fields=["reservation_date"], name="books_reser_reserva_99e95f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookreview",
            unique_together={("user", "book")},
        ),
        migrations.AlterUniqueTogether(
            name="bookstatistics",
            unique_together={("book", "date")},
        ),
        migrations.AlterUniqueTogether(
            name="bookwishlist",
            unique_together={("user", "book")},
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["title"], name="books_book_title_d3218d_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["isbn"], name="books_book_isbn_54becd_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(
                fields=["category", "status"], name="books_book_categor_b28f7c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(
                fields=["library", "status"], name="books_book_library_e70d8c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(
                fields=["is_featured", "is_popular"],
                name="books_book_is_feat_830272_idx",
            ),
        ),
    ]
