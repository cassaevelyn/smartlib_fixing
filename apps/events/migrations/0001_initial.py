# Generated by Django 5.2.3 on 2025-06-19 11:30

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("library", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EventCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(blank=True, max_length=20, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(default="#007bff", max_length=7)),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Event Categories",
                "db_table": "events_category",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(max_length=300)),
                ("slug", models.SlugField(blank=True, max_length=350, unique=True)),
                (
                    "event_code",
                    models.CharField(blank=True, max_length=30, unique=True),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("WORKSHOP", "Workshop"),
                            ("SEMINAR", "Seminar"),
                            ("LECTURE", "Lecture"),
                            ("CONFERENCE", "Conference"),
                            ("TRAINING", "Training Session"),
                            ("BOOK_CLUB", "Book Club"),
                            ("STUDY_GROUP", "Study Group"),
                            ("EXAM_PREP", "Exam Preparation"),
                            ("NETWORKING", "Networking Event"),
                            ("CULTURAL", "Cultural Event"),
                            ("COMPETITION", "Competition"),
                            ("ORIENTATION", "Orientation"),
                        ],
                        default="WORKSHOP",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PUBLISHED", "Published"),
                            ("REGISTRATION_OPEN", "Registration Open"),
                            ("REGISTRATION_CLOSED", "Registration Closed"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("POSTPONED", "Postponed"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("agenda", models.TextField(blank=True)),
                ("learning_objectives", models.JSONField(blank=True, default=list)),
                ("prerequisites", models.TextField(blank=True)),
                ("materials_provided", models.JSONField(blank=True, default=list)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("timezone", models.CharField(default="Asia/Karachi", max_length=50)),
                ("is_recurring", models.BooleanField(default=False)),
                ("recurrence_pattern", models.JSONField(blank=True, default=dict)),
                ("venue_details", models.TextField(blank=True)),
                ("is_online", models.BooleanField(default=False)),
                ("online_meeting_link", models.URLField(blank=True)),
                (
                    "online_meeting_password",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "registration_type",
                    models.CharField(
                        choices=[
                            ("FREE", "Free Registration"),
                            ("PAID", "Paid Registration"),
                            ("INVITATION_ONLY", "Invitation Only"),
                            ("FIRST_COME_FIRST_SERVE", "First Come First Serve"),
                            ("APPROVAL_REQUIRED", "Approval Required"),
                        ],
                        default="FREE",
                        max_length=25,
                    ),
                ),
                (
                    "registration_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                ("max_participants", models.PositiveIntegerField(default=50)),
                ("min_participants", models.PositiveIntegerField(default=1)),
                ("registration_deadline", models.DateTimeField()),
                ("early_bird_deadline", models.DateTimeField(blank=True, null=True)),
                (
                    "early_bird_discount",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("target_audience", models.JSONField(blank=True, default=list)),
                ("required_role", models.CharField(blank=True, max_length=20)),
                ("required_subscription", models.BooleanField(default=False)),
                (
                    "banner_image",
                    models.ImageField(blank=True, upload_to="events/banners/"),
                ),
                (
                    "thumbnail",
                    models.ImageField(blank=True, upload_to="events/thumbnails/"),
                ),
                ("gallery_images", models.JSONField(blank=True, default=list)),
                ("attachments", models.JSONField(blank=True, default=list)),
                ("has_certificate", models.BooleanField(default=False)),
                (
                    "certificate_template",
                    models.FileField(blank=True, upload_to="events/certificates/"),
                ),
                ("has_feedback_form", models.BooleanField(default=True)),
                ("requires_attendance_tracking", models.BooleanField(default=True)),
                ("total_registrations", models.PositiveIntegerField(default=0)),
                ("total_attendees", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("total_feedback", models.PositiveIntegerField(default=0)),
                ("send_reminders", models.BooleanField(default=True)),
                ("reminder_hours", models.JSONField(blank=True, default=list)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("external_links", models.JSONField(blank=True, default=dict)),
                ("additional_info", models.JSONField(blank=True, default=dict)),
                (
                    "co_organizers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="co_organized_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="library.library",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organized_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="events",
                        to="events.eventcategory",
                    ),
                ),
            ],
            options={
                "db_table": "events_event",
                "ordering": ["-start_date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="EventNotification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("REMINDER", "Event Reminder"),
                            ("UPDATE", "Event Update"),
                            ("CANCELLATION", "Event Cancellation"),
                            ("POSTPONEMENT", "Event Postponement"),
                            ("VENUE_CHANGE", "Venue Change"),
                            ("SPEAKER_CHANGE", "Speaker Change"),
                            ("GENERAL", "General Announcement"),
                        ],
                        max_length=15,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("send_to_all_registrants", models.BooleanField(default=True)),
                ("send_to_attendees_only", models.BooleanField(default=False)),
                ("send_to_waitlist", models.BooleanField(default=False)),
                ("send_immediately", models.BooleanField(default=True)),
                ("scheduled_send_time", models.DateTimeField(blank=True, null=True)),
                ("is_sent", models.BooleanField(default=False)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("recipients_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="events.event",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "events_notification",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EventRegistration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "registration_code",
                    models.CharField(blank=True, max_length=30, unique=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("CONFIRMED", "Confirmed"),
                            ("WAITLISTED", "Waitlisted"),
                            ("CANCELLED", "Cancelled"),
                            ("ATTENDED", "Attended"),
                            ("NO_SHOW", "No Show"),
                            ("REFUNDED", "Refunded"),
                        ],
                        default="CONFIRMED",
                        max_length=15,
                    ),
                ),
                ("registration_date", models.DateTimeField(auto_now_add=True)),
                (
                    "registration_fee_paid",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Payment Pending"),
                            ("COMPLETED", "Payment Completed"),
                            ("FAILED", "Payment Failed"),
                            ("REFUNDED", "Refunded"),
                            ("NOT_REQUIRED", "Not Required"),
                        ],
                        default="NOT_REQUIRED",
                        max_length=15,
                    ),
                ),
                ("payment_reference", models.CharField(blank=True, max_length=100)),
                ("check_in_time", models.DateTimeField(blank=True, null=True)),
                ("check_out_time", models.DateTimeField(blank=True, null=True)),
                ("attendance_duration", models.DurationField(blank=True, null=True)),
                ("qr_code_data", models.TextField(blank=True)),
                ("qr_code_expires_at", models.DateTimeField(blank=True, null=True)),
                ("dietary_requirements", models.TextField(blank=True)),
                ("special_needs", models.TextField(blank=True)),
                ("emergency_contact", models.CharField(blank=True, max_length=200)),
                ("how_did_you_hear", models.CharField(blank=True, max_length=200)),
                ("expectations", models.TextField(blank=True)),
                ("certificate_issued", models.BooleanField(default=False)),
                (
                    "certificate_file",
                    models.FileField(blank=True, upload_to="certificates/"),
                ),
                ("feedback_submitted", models.BooleanField(default=False)),
                ("reminder_sent", models.BooleanField(default=False)),
                ("confirmation_sent", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registrations",
                        to="events.event",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_registrations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "events_registration",
                "ordering": ["-registration_date"],
            },
        ),
        migrations.CreateModel(
            name="EventFeedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "content_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "speaker_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "organization_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "venue_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("what_you_liked", models.TextField(blank=True)),
                ("what_could_improve", models.TextField(blank=True)),
                ("additional_comments", models.TextField(blank=True)),
                ("would_recommend", models.BooleanField(default=True)),
                ("would_attend_similar", models.BooleanField(default=True)),
                ("future_topics", models.TextField(blank=True)),
                ("preferred_format", models.CharField(blank=True, max_length=100)),
                ("preferred_duration", models.CharField(blank=True, max_length=100)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="events.event",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "registration",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="events.eventregistration",
                    ),
                ),
            ],
            options={
                "db_table": "events_feedback",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EventResource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("PRESENTATION", "Presentation"),
                            ("DOCUMENT", "Document"),
                            ("VIDEO", "Video"),
                            ("AUDIO", "Audio"),
                            ("LINK", "External Link"),
                            ("READING_MATERIAL", "Reading Material"),
                            ("ASSIGNMENT", "Assignment"),
                            ("CERTIFICATE", "Certificate Template"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(blank=True, upload_to="events/resources/")),
                ("external_link", models.URLField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("available_before_event", models.BooleanField(default=False)),
                ("available_after_event", models.BooleanField(default=True)),
                ("file_size", models.PositiveIntegerField(blank=True, null=True)),
                ("download_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="events.event",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "events_resource",
                "ordering": ["resource_type", "title"],
            },
        ),
        migrations.CreateModel(
            name="EventSeries",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "banner_image",
                    models.ImageField(blank=True, upload_to="events/series/"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("requires_series_registration", models.BooleanField(default=False)),
                (
                    "series_fee",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "events",
                    models.ManyToManyField(
                        blank=True, related_name="series", to="events.event"
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_series",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Event Series",
                "db_table": "events_series",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EventSpeaker",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("title", models.CharField(blank=True, max_length=200)),
                ("organization", models.CharField(blank=True, max_length=200)),
                ("bio", models.TextField(blank=True)),
                ("expertise", models.JSONField(blank=True, default=list)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("website", models.URLField(blank=True)),
                ("linkedin", models.URLField(blank=True)),
                ("photo", models.ImageField(blank=True, upload_to="speakers/photos/")),
                ("total_events", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "events_speaker",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.AddField(
            model_name="event",
            name="speakers",
            field=models.ManyToManyField(
                blank=True, related_name="events", to="events.eventspeaker"
            ),
        ),
        migrations.CreateModel(
            name="EventStatistics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                ("new_registrations", models.PositiveIntegerField(default=0)),
                ("total_registrations", models.PositiveIntegerField(default=0)),
                ("cancellations", models.PositiveIntegerField(default=0)),
                ("attendees", models.PositiveIntegerField(default=0)),
                ("no_shows", models.PositiveIntegerField(default=0)),
                (
                    "attendance_rate",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "average_attendance_duration",
                    models.DurationField(blank=True, null=True),
                ),
                ("feedback_submissions", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("resource_downloads", models.PositiveIntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "db_table": "events_statistics",
                "ordering": ["event", "-date"],
            },
        ),
        migrations.CreateModel(
            name="EventWaitlist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("position", models.PositiveIntegerField()),
                ("notified", models.BooleanField(default=False)),
                ("notification_sent_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waitlist",
                        to="events.event",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_waitlist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "events_waitlist",
                "ordering": ["position"],
            },
        ),
        migrations.AddIndex(
            model_name="eventregistration",
            index=models.Index(
                fields=["user", "status"], name="events_regi_user_id_0e863b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventregistration",
            index=models.Index(
                fields=["event", "status"], name="events_regi_event_i_c98244_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="eventregistration",
            index=models.Index(
                fields=["registration_date"], name="events_regi_registr_07801a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventregistration",
            unique_together={("user", "event")},
        ),
        migrations.AlterUniqueTogether(
            name="eventfeedback",
            unique_together={("user", "event")},
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["start_date", "start_time"],
                name="events_even_start_d_764756_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["status", "registration_deadline"],
                name="events_even_status_90d760_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["library", "start_date"], name="events_even_library_5b3e9b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["category", "event_type"], name="events_even_categor_a25b1f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="eventstatistics",
            unique_together={("event", "date")},
        ),
        migrations.AlterUniqueTogether(
            name="eventwaitlist",
            unique_together={("user", "event")},
        ),
    ]
