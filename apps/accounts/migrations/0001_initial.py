# Generated by Django 5.2.3 on 2025-06-19 11:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AdminProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("permissions", models.JSONField(blank=True, default=dict)),
                ("can_approve_users", models.BooleanField(default=False)),
                ("can_manage_events", models.BooleanField(default=False)),
                ("can_manage_books", models.BooleanField(default=False)),
                ("can_view_analytics", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "accounts_admin_profile",
            },
        ),
        migrations.CreateModel(
            name="LoyaltyTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("points", models.IntegerField()),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("EARNED", "Points Earned"),
                            ("SPENT", "Points Spent"),
                            ("EXPIRED", "Points Expired"),
                            ("ADJUSTED", "Points Adjusted"),
                        ],
                        max_length=10,
                    ),
                ),
                ("description", models.CharField(max_length=255)),
                (
                    "reference_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "db_table": "accounts_loyalty_transaction",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserLibraryAccess",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "access_type",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard Access"),
                            ("EXTENDED", "Extended Access"),
                            ("PREMIUM", "Premium Access"),
                            ("RESTRICTED", "Restricted Access"),
                        ],
                        default="STANDARD",
                        max_length=15,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "accounts_user_library_access",
            },
        ),
        migrations.CreateModel(
            name="UserPreference",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("NOTIFICATION", "Notification Preferences"),
                            ("DISPLAY", "Display Preferences"),
                            ("PRIVACY", "Privacy Preferences"),
                            ("ACCESSIBILITY", "Accessibility Preferences"),
                        ],
                        max_length=20,
                    ),
                ),
                ("key", models.CharField(max_length=50)),
                ("value", models.JSONField()),
            ],
            options={
                "db_table": "accounts_user_preference",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "education_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FOUNDATION", "Foundation"),
                            ("INTERMEDIATE", "Intermediate"),
                            ("ADVANCED", "Advanced"),
                            ("FINAL", "Final"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("enrollment_year", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "expected_completion_year",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("study_subjects", models.JSONField(blank=True, default=list)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "emergency_contact_relation",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "preferred_study_time",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MORNING", "Morning"),
                            ("AFTERNOON", "Afternoon"),
                            ("EVENING", "Evening"),
                            ("NIGHT", "Night"),
                            ("FLEXIBLE", "Flexible"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "preferred_seat_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("INDIVIDUAL", "Individual Study"),
                            ("GROUP", "Group Study"),
                            ("COMPUTER", "Computer Workstation"),
                            ("SILENT", "Silent Study"),
                            ("WINDOW", "Window Seat"),
                            ("ANY", "Any Type"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("loyalty_points", models.PositiveIntegerField(default=0)),
                (
                    "total_study_hours",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("books_read", models.PositiveIntegerField(default=0)),
                ("events_attended", models.PositiveIntegerField(default=0)),
            ],
            options={
                "db_table": "accounts_user_profile",
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("session_key", models.CharField(max_length=40)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("device_info", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("logout_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "accounts_user_session",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserVerification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "verification_type",
                    models.CharField(
                        choices=[
                            ("EMAIL", "Email Verification"),
                            ("PASSWORD_RESET", "Password Reset"),
                            ("ACCOUNT_ACTIVATION", "Account Activation"),
                            ("PHONE", "Phone Verification"),
                        ],
                        max_length=20,
                    ),
                ),
                ("token", models.CharField(max_length=100)),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField()),
                ("attempts", models.PositiveIntegerField(default=0)),
                ("max_attempts", models.PositiveIntegerField(default=5)),
            ],
            options={
                "db_table": "accounts_user_verification",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\+?1?\\d{9,15}$", "Enter a valid phone number."
                            )
                        ],
                    ),
                ),
                (
                    "crn",
                    models.CharField(
                        help_text="ICAP CA Registration Number (e.g., ICAP-CA-2023-1234)",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^ICAP-CA-\\d{4}-\\d{4}$",
                                "Enter valid CRN format: ICAP-CA-YYYY-####",
                            )
                        ],
                    ),
                ),
                (
                    "student_id",
                    models.CharField(blank=True, max_length=20, unique=True),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other")],
                        max_length=1,
                    ),
                ),
                ("address", models.TextField(blank=True)),
                ("city", models.CharField(blank=True, max_length=100)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("STUDENT", "Student"),
                            ("ADMIN", "Library Admin"),
                            ("SUPER_ADMIN", "Super Admin"),
                        ],
                        default="STUDENT",
                        max_length=15,
                    ),
                ),
                ("is_approved", models.BooleanField(default=False)),
                ("approval_date", models.DateTimeField(blank=True, null=True)),
                ("avatar", models.ImageField(blank=True, upload_to="avatars/%Y/%m/")),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("preferred_language", models.CharField(default="en", max_length=10)),
                (
                    "notification_preferences",
                    models.JSONField(blank=True, default=dict),
                ),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("login_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_users",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "accounts_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
